"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Basics
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                                           " We're running Vim, not Vi!
filetype on                                                " Enable filetype detection
filetype indent on                                         " Enable filetype-specific indenting
filetype plugin on                                         " Enable filetype-specific plugins
syntax on                                                  " Enable syntax highlighting

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colours
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
colorscheme onedark
if (has("termguicolors"))
  set termguicolors
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tabs and spaces config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab                                              " Turns tabs into spaces
autocmd FileType html setlocal ts=2 sts=2 sw=2
autocmd FileType javascript setlocal ts=2 sts=2 sw=2
autocmd FileType json setlocal ts=2 sts=2 sw=2
autocmd FileType css setlocal ts=2 sts=2 sw=2

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" UI config
set number
set showcmd
set noshowmode                                             " Disable showing the mode in the status line
set scrolloff=5                                            " Enable always showing 5 lines above/below the cursor position

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:currentmode={
  \ 'n'  : 'N ',
  \ 'no' : 'N·Operator Pending ',
  \ 'v'  : 'V ',
  \ 'V'  : 'V·Line ',
  \ "\<C-v>" : 'V·Block ',
  \ 's'  : 'Select ',
  \ 'S'  : 'S·Line ',
  \ "\<C-s>"  : 'S·Block ',
  \ 'i'  : 'I ',
  \ 'R'  : 'R ',
  \ 'Rv' : 'V·Replace ',
  \ 'c'  : 'Command ',
  \ 'cv' : 'Vim Ex ',
  \ 'ce' : 'Ex ',
  \ 'r'  : 'Prompt ',
  \ 'rm' : 'More ',
  \ 'r?' : 'Confirm ',
  \ '!'  : 'Shell ',
  \ 't'  : 'Terminal '
\}
set lazyredraw

function! GitInfo()
  let git = fugitive#head()
  if git != ''
    return ' '.fugitive#head()
  else
    return ''
endfunction

set laststatus=2
set statusline=
set statusline+=%*\ %{toupper(g:currentmode[mode()])}      " Current mode
"set statusline+=%8*\ [%n]                                 " Buffer number
set statusline+=%*\ %{GitInfo()}                           " Git Branch name
set statusline+=%*\ %<%f                                   " File path
set statusline+=%{&readonly?'\ \ ':'\ \ '}                " Read-only flag
set statusline+=%{&modified?'\ ✎':''}                      " Modified flag
set statusline+=%=                                         " Split between left and right side items
set statusline+=%*\ %y                                     " FileType
"set statusline+=%7*\ %{(&fenc!=''?&fenc:&enc)}\[%{&ff}]\  " Encoding & Fileformat
set statusline+=%4l,%-4v                                   " Row of cursor, column of curson
set statusline+=%3p%%\ \                                   " Percentage through the file


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NETRW
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_liststyle=3                                    " Show tree view
let g:netrw_banner=0                                       " Remove useless banner
let g:netrw_winsize=20                                     " Set width of explorer to 20% of page
let g:netrw_browse_split=4
let g:netrw_altv=1
" augroup ProjectDrawer
"   autocmd!
"   autocmd VimEnter * :Lexplore
"   autocmd VimEnter * :wincmd p
" augroup END

" Trim whitespace on save
function! <SID>StripTrailingWhitespaces()
    let l=line(".")
    let c=col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre *.rb,*.py,*.c,*.java,*.js :call <SID>StripTrailingWhitespaces()

" Spell check for markdown files
augroup markdownSpell
    autocmd!
    autocmd FileType markdown setlocal spell
    autocmd BufRead,BufNewFile *.md setlocal spell
augroup END

" Markdown Preview settings
let vim_markdown_preview_toggle=0
let vim_markdown_preview_github=1
let vim_markdown_preview_temp_file=1
let vim_markdown_preview_browser='Google Chrome'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Keymaps
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap esc to hh
let mapleader="\<Space>"
inoremap hh <ESC>

" Toggle a file explorer
nnoremap <silent> <leader>e :Lex<cr>

" Create splits with <leader>[-|], they look like the split they create
map <silent> <leader>\| :vsplit<cr>
map <silent> <leader>- :split<cr>
" Display the content of registers
nnoremap <silent> <leader>@ :registers<cr>
" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>
" Pressing <leader>ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Emmet settings
let g:user_emmet_leader_key=','

" Vim Hardmode settings
let g:hardtime_default_on=0

" Look for local settings
if filereadable(expand('~/.vimlocal/vimrc'))
  source '~/.vimlocal/vimrc'
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')
Plug 'mattn/emmet-vim'
Plug 'vim-ruby/vim-ruby'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'kaicataldo/material.vim'
Plug 'JamshedVesuna/vim-markdown-preview'
Plug 'takac/vim-hardtime'
Plug 'joshdick/onedark.vim'
Plug 'tpope/vim-fugitive'
call plug#end()

